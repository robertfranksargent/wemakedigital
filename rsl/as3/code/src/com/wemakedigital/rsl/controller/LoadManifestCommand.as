package com.wemakedigital.rsl.controller {	import com.wemakedigital.rsl.RSLConstants;	import com.wemakedigital.rsl.model.Manifest;	import com.wemakedigital.rsl.model.ManifestsProxy;		import org.puremvc.as3.multicore.interfaces.IFacade;	import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.command.SimpleCommand;		import flash.events.ErrorEvent;	import flash.events.Event;			/**	 * Command class for loading a manifest file and its dependencies.	 */	public class LoadManifestCommand extends SimpleCommand 	{		//----------------------------------------------------------------------		//		//  Variables		//		//----------------------------------------------------------------------						/**		 * @private		 */		private var manifest : Manifest ;				/**		 * @private		 */		private var isComplete : Boolean ;				//----------------------------------------------------------------------		//		//  Getters and Setters		//		//----------------------------------------------------------------------						/**		 * @private		 */		private function get manifestProxy ( ) : ManifestsProxy		{			return this.facade.retrieveProxy( ManifestsProxy.NAME ) as ManifestsProxy ;		}				//----------------------------------------------------------------------		//		//  Methods		//		//----------------------------------------------------------------------				/**		 * This method executes the loading of an RSL manifest and its dependencies. The		 * INotification object passed in the <code>note</code> parameter must refer to a Manifest		 * object in its <code>body</code>property.		 * 		 * @inheritDoc		 */		override public function execute ( note : INotification ) : void		{			if ( this.manifestProxy )			{				this.manifest = note.getBody( ) as Manifest ;				if ( ! this.manifest.isLoaded )				{					this.isComplete = false ;					this.load( this.manifest ) ;				}				else				{					this.completeManifestLoad( ) ;				}			}			else			{				throw new Error( "The ManifestsProxy must be registered before this command is executed." ) ;			}		}		/**		 * @private		 */		private function load ( manifest : Manifest ) : void		{			if ( ! this.manifestProxy.contains( manifest ) &&				 ! this.manifestProxy.getManifestByUrl( manifest.url ) )			{				this.manifestProxy.addManifest( manifest ) ;								manifest.addEventListener( Event.COMPLETE , this.onManifestLoadComplete ) ;				manifest.addEventListener( ErrorEvent.ERROR , this.onManifestLoadError ) ;				manifest.load( ) ;								trace( this + " execute( ) " + manifest.url ) ;			}			else			{				this.completeManifestLoad( ) ;			}		}				/**		 * @private		 */		private function completeManifestLoad ( ) : void		{			if ( ! this.isComplete && this.manifestProxy.isManifestsLoadComplete( ) )			{				this.isComplete = true ;				this.sendNotification( RSLConstants.LOAD_MANIFEST_COMPLETE , this.manifest ) ;			}		}						/**		 * @private		 */		private function removeManifestListeners ( manifest : Manifest ) : void		{			manifest.removeEventListener( Event.COMPLETE , this.onManifestLoadComplete ) ;			manifest.removeEventListener( ErrorEvent.ERROR , this.onManifestLoadError ) ;		}				//----------------------------------------------------------------------		//		//  Event Handlers		//		//----------------------------------------------------------------------						/**		 * @private		 */		private function onManifestLoadComplete ( e : Event ) : void		{			var manifest : Manifest = e.target as Manifest ;			manifest.id = manifest.xml.@id ;			manifest.componentURL = manifest.xml.@url ;			manifest.bytes = manifest.xml.@bytes ;						for each ( var dependency : XML in manifest.xml.child( "dependency" ) )			{				var url : String = dependency.@url ;				var dependencyManifest : Manifest = this.manifestProxy.getManifestByUrl( url ) || new Manifest( dependency.@url ) ;				manifest.dependencies.push( dependencyManifest ) ;				this.load( dependencyManifest ) ;			}						this.removeManifestListeners( manifest ) ;			this.completeManifestLoad( ) ;		}		/**		 * @private		 */		private function onManifestLoadError ( e : ErrorEvent ) : void		{			var manifest : Manifest = e.target as Manifest ;			this.removeManifestListeners( manifest ) ;			this.sendNotification( RSLConstants.LOAD_MANIFEST_ERROR , manifest ) ;		}	}}