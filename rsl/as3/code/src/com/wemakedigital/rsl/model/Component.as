package com.wemakedigital.rsl.model {	import flash.display.Loader;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLRequest;	import flash.system.LoaderContext;		public class Component extends EventDispatcher	{		//----------------------------------------------------------------------		//		// Properties		//		//----------------------------------------------------------------------						public var id : String ;		public var url : String ;		public var loader : Loader ;		public var isLoaded : Boolean ;				//----------------------------------------------------------------------		//		// Methods		//		//----------------------------------------------------------------------						public function Component ( )		{			this.isLoaded = false ;		}				public function load ( context : LoaderContext ) : void		{			if ( ! this.isLoaded )			{				this.loader = new Loader( ) ;				this.loader.load( new URLRequest( this.url ) , context ) ;				this.addLoaderListeners( ) ;			}			else			{				this.completeLoad( ) ;			}		}				/**		 * @private		 */		private function addLoaderListeners ( ) : void		{			this.loader.contentLoaderInfo.addEventListener( Event.COMPLETE , this.onLoaderComplete ) ;			this.loader.contentLoaderInfo.addEventListener( IOErrorEvent.IO_ERROR , this.onLoaderError ) ;					}				/**		 * @private		 */		private function removeLoaderListeners ( ) :  void		{			this.loader.contentLoaderInfo.removeEventListener( Event.COMPLETE , this.onLoaderComplete ) ;			this.loader.contentLoaderInfo.removeEventListener( IOErrorEvent.IO_ERROR , this.onLoaderError ) ;		}		/**		 * @private		 */		private function completeLoad ( ) : void		{			this.removeLoaderListeners( ) ;			this.dispatchEvent( new Event( Event.COMPLETE ) ) ;		}				//----------------------------------------------------------------------		//		// Event Handlers		//		//----------------------------------------------------------------------						/**		 * @private		 */		private function onLoaderComplete ( e : Event ) : void		{						this.completeLoad( ) ;		}		/**		 * @private		 */		private function onLoaderError ( e : IOErrorEvent ) : void		{			this.removeLoaderListeners( ) ;			this.dispatchEvent( new ErrorEvent( ErrorEvent.ERROR ) ) ;		}	}}