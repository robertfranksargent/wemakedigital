package com.wemakedigital.log.outputs {	import com.wemakedigital.log.LogLevel;	import com.wemakedigital.log.LogMessage;		import flash.external.ExternalInterface;		public class LogFirebug implements ILogOutput 	{		/**		 * The url of the Flash Global Security Settings Panel, used if ExternalInterface calls fail due to security breach.		 */
		public static const FLASH_GLOBAL_SECURITY_SETTINGS_PANEL_URL : String = "http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html" ;
				/**		 * The unique instance of the class.		 */		private static var instance : LogFirebug ;		/**		 * Class constructor.		 */		public function LogFirebug ( )		{			if ( LogFirebug.instance )			{				throw new Error( "LogFirebug and can only be accessed through LogFirebug.getInstance( )" ) ; 			}		}		/**		 * Intantiates the class if it is undefined and returns the unique 		 * instance.		 * 		 * @return	The unique instance of the class.		 */		public static function getInstance ( ) : LogFirebug		{			if ( ! LogFirebug.instance ) LogFirebug.instance = new LogFirebug( ) ;			return LogFirebug.instance;		}				/**		 * Outputs a logMessage to the firebug console when called by the Log class.		 * 		 * @param logMessage	The log message passed by the Log class.		 */		public function output ( logMessage : LogMessage ) : void		{			var method : String ;			var output : String = "" ;			var messages : Array = [ ] ;						if ( logMessage.className ) output += logMessage.className + " " ;			if ( logMessage.methodName ) output += "[" + logMessage.methodName + "] " ;						switch ( logMessage.level )			{				case LogLevel.FATAL :				case LogLevel.ERROR :					method = "console.error" ;					break ;									case LogLevel.WARNING :					method = "console.warn" ;					break ;									case LogLevel.INFO :					method = "console.info" ;					break ;									case LogLevel.DEBUG :				case LogLevel.STACK_TRACE :					method = "console.debug" ;					break ;			}						if ( logMessage.messages )			{				for ( var i : uint = 0 , n : uint = logMessage.messages.length ; i < n ; i++ )				{					messages.push( logMessage.messages[ i ].toString( ) ) ;				}			}						output += messages.join( ", " ) ;			
			try
			{							ExternalInterface.call( method , output ) ;
			}
			catch ( e : Error )
			{
				trace( output ) ;
			}		}	}}