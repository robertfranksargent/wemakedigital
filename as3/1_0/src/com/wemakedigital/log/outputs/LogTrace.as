package com.wemakedigital.log.outputs{	import com.wemakedigital.log.LogMessage;		public class LogTrace implements ILogOutput 	{		/**		 * The unique instance of the class.		 */		private static var instance : LogTrace ;		/**		 * Class constructor.		 */		public function LogTrace ( )		{			if ( LogTrace.instance )			{				throw new Error( "LogTrace and can only be accessed through LogTrace.getInstance( )" ) ;  			}		}		/**		 * Intantiates the class if it is undefined and returns the unique 		 * instance.		 * 		 * @return	The unique instance of the class.		 */		public static function getInstance ( ) : LogTrace		{			if ( ! LogTrace.instance ) LogTrace.instance = new LogTrace( ) ;			return LogTrace.instance ;		}				/**		 * Traces out a LogMessage.		 * 		 * @param logMessage	The log message passed by the Log class.		 */		public function output ( logMessage : LogMessage ) : void		{			var output : String = "[" + logMessage.level + "]" ;			var messages : Array = [ ] ;						if ( logMessage.className ) output += logMessage.className + " " ;			if ( logMessage.methodName ) output += "[" + logMessage.methodName + "] " ;						if ( logMessage.messages )			{				for ( var i : uint = 0 , n : uint = logMessage.messages.length ; i < n ; i++ )				{					messages.push( logMessage.messages[ i ].toString( ) ) ;				}			}						output += messages.join ( ", " ) ;						trace( output ) ;		}	}}