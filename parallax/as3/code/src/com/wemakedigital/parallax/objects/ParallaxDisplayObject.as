package com.wemakedigital.parallax.objects {	import com.wemakedigital.parallax.render.ParallaxRenderData;	import com.wemakedigital.parallax.view.ParallaxViewport;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.PixelSnapping;		public class ParallaxDisplayObject extends ParallaxObject 	{		public var display : DisplayObject ;		public var bitmap : Bitmap ;				private var _scaleX : Number = 1 ;			private var _scaleY : Number = 1 ;		public function ParallaxDisplayObject ( display : DisplayObject , x : Number = 0 , y : Number = 0 , z : Number = 0 , width : Number = 0 , height : Number = 0 )		{			super( x , y , z , width , height ) ;			this.display = display ;			this.displayAsBitmap = false ;		}				public function set displayAsBitmap ( value : Boolean ) : void		{			if ( value )			{				if ( ! this.bitmap )				{					this.createBitmap( ) ;					this.addBitmap( ) ;					this.removeDisplay( ) ;				}			}			else			{				this.addDisplay( ) ;				this.removeBitmap( ) ;				this.destroyBitmap( ) ;			}		}		public function set scaleX ( value : Number ) : void		{			this._scaleX = value ;		}		public function get scaleX ( ) : Number		{			return this._scaleX ;		}				public function set scaleY ( value : Number ) : void		{			this._scaleY = value ;		}		public function get scaleY ( ) : Number		{			return this._scaleY ;		}						override public function project ( data : ParallaxRenderData ) : void		{			this.addToViewport( data.viewport ) ;			super.project( data ) ;		}				override public function render ( data : ParallaxRenderData ) : void		{			if ( data.depth < data.viewport.numChildren )			{				data.viewport.setChildIndex( this.container , data.depth ) ;			}			super.render( data ) ;		}		override public function set px ( value : Number ) : void		{			this.container.x = value - ( ( this.explicitWidth ? this.explicitWidth * this.sx : this.container.width ) >> 1 ) ;			super.px = value ;		}				override public function set py ( value : Number ) : void		{			this.container.y = value - ( ( this.explicitHeight ? this.explicitHeight * this.sy : this.container.height ) >> 1 ) ;			super.py = value ;		}				override public function set sx ( value : Number ) : void		{			this.container.scaleX = value * this._scaleX ;			super.sx = value ;		}				override public function get sx ( ) : Number		{			return super.sx * this._scaleX ;		}				override public function set sy ( value : Number ) : void		{			this.container.scaleY = value * this._scaleY ;			super.sy = value ;		}				override public function get sy ( ) : Number		{			return super.sy * this._scaleY ;		}		protected function addToViewport ( viewport : ParallaxViewport ) : void		{			if ( ! viewport.contains( this.container ) ) viewport.addChild( this.container ) ;		}				protected function createBitmap ( ) : void		{			var width : Number = this.explicitWidth || this.display.width ;			var height : Number = this.explicitHeight || this.display.height ;						this.bitmap = new Bitmap( ) ;						if ( width > 0 && height > 0 )			{				var bitmapData : BitmapData = new BitmapData( width , height , true , 0x00000000 ) ;				bitmapData.draw( this.display ) ;								this.bitmap.bitmapData = bitmapData ;				this.bitmap.pixelSnapping = PixelSnapping.AUTO ;				this.bitmap.smoothing = true ;			}		}				protected function destroyBitmap ( ) : void		{			if ( this.bitmap )			{				if ( this.bitmap.bitmapData ) this.bitmap.bitmapData.dispose( ) ;				this.bitmap = null ;			}		}				protected function addDisplay ( ) : void		{			if ( this.display ) this.container.addChild( this.display ) ;		}				protected function removeDisplay ( ) : void		{			if ( this.display && this.container.contains( this.display ) ) this.container.removeChild( this.display ) ;		}				protected function addBitmap ( ) : void		{			if ( this.bitmap ) this.container.addChild( this.bitmap ) ;		}				protected function removeBitmap ( ) : void		{			if ( this.bitmap && this.container.contains( this.bitmap ) ) this.container.removeChild( this.bitmap ) ;		}	}}