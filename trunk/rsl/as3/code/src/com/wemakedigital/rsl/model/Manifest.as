package com.wemakedigital.rsl.model {	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;		/**	 * This is a component manifest class.	 */	public class Manifest extends EventDispatcher	{		//----------------------------------------------------------------------		//		// Properties		//		//----------------------------------------------------------------------				/**		 * The unique manifest identifier.		 */		public var id : String ;				/**		 * The URL of the manifest file.		 */		public var url : String ;				/**		 * The URL of the component associated with the manifest.		 */		public var componentURL : String ;				/**		 * The size of the component in bytes.		 */		public var bytes : int ;				/**		 * A list of the manifest dependencies.		 */		public var dependencies : Array ;				/**		 * The manifest file loader.		 */		public var loader : URLLoader ;				/**		 * The XML produced from the manifest file.		 */		public var xml : XML ;				/**		 * @private		 */		private var _isLoaded : Boolean ;				//----------------------------------------------------------------------		//		// Getters and Setters		//		//----------------------------------------------------------------------						/**		 * A value of <code>true</code> if the manifest file is currently loaded.		 */				public function get isLoaded ( ) : Boolean		{			return this._isLoaded ;		}				//----------------------------------------------------------------------		//		// Methods		//		//----------------------------------------------------------------------						/**		 * Constructor.		 * 		 * @param	url		The URL of the manifest file.		 */		public function Manifest ( url : String )		{			this.url = url ;			this.dependencies = [ ] ;			this._isLoaded = false ;		}		/**		 * Loads the file referred to in the <code>url</code> property.		 */		public function load ( ) : void		{			if ( ! this.isLoaded )			{				this.loader = new URLLoader( ) ;				this.loader.load( new URLRequest( this.url ) ) ;				this.addLoaderListeners( ) ;			}			else			{				this.completeLoad( ) ;			}		}				/**		 * Creates a load list for this manifest.		 * 		 * @param	loadList	The load list that will be populated.		 * @return	A list of Manifest instances.		 */		public function createLoadList ( loadList : Array = null ) : Array		{			if ( ! loadList ) loadList = [ ] ;			if ( loadList.indexOf( this ) < 0 )			{				if ( this.componentURL ) loadList.push( this ) ;								for each ( var manifest : Manifest in this.dependencies )				{					manifest.createLoadList( loadList ) ;				}			}			return loadList ;		}		/**		 * Gets the total bytes to load for this manifest.		 * 		 * @return	An integer representing the bytes to load.		 */		public function getBytesToLoad ( ) : int		{			var bytes : int = this.bytes ;			for each ( var manifest : Manifest in this.createLoadList( ) )			{				bytes += manifest.getBytesToLoad( ) ;			}			return bytes ;		}		/**		 * @private		 */		private function addLoaderListeners ( ) :  void		{			this.loader.addEventListener( Event.COMPLETE , this.onLoaderComplete ) ;			this.loader.addEventListener( IOErrorEvent.IO_ERROR , this.onLoaderError ) ;		}				/**		 * @private		 */		private function removeLoaderListeners ( ) :  void		{			this.loader.removeEventListener( Event.COMPLETE , this.onLoaderComplete ) ;			this.loader.removeEventListener( IOErrorEvent.IO_ERROR , this.onLoaderError ) ;		}				/**		 * @private		 */		private function completeLoad ( ) : void		{			this._isLoaded = true ;			this.removeLoaderListeners( ) ;			this.dispatchEvent( new Event( Event.COMPLETE ) ) ;		}		//----------------------------------------------------------------------		//		// Event Handlers		//		//----------------------------------------------------------------------				/**		 * @private		 */		private function onLoaderComplete ( e : Event ) : void		{			this.xml = new XML( this.loader.data ) ;			this.completeLoad( ) ;		}				/**		 * @private		 */		private function onLoaderError ( e : IOErrorEvent ) : void		{			this.removeLoaderListeners( ) ;			this.dispatchEvent( new ErrorEvent( ErrorEvent.ERROR ) ) ;		}	}}