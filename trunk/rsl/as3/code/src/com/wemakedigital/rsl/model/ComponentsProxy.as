package com.wemakedigital.rsl.model {	import org.puremvc.as3.multicore.patterns.proxy.Proxy;			/**	 * Components proxy class.	 */	public class ComponentsProxy extends Proxy 	{		//----------------------------------------------------------------------		//		//  Constants		//		//----------------------------------------------------------------------				/**		 * The name of the proxy.		 */		public static const NAME : String = "ComponentsProxy" ;						//----------------------------------------------------------------------		//		//  Getters and Setters		//		//----------------------------------------------------------------------						/**		 * A list of components.		 */		public function get components ( ) : Array		{			return this.data as Array ;		}				/**		 * @private		 */		public function set components ( value : Array ) : void		{			this.data = value ;		}				//----------------------------------------------------------------------		//		//  Methods		//		//----------------------------------------------------------------------					/**		 * Constructor.		 */		public function ComponentsProxy ( )		{			super( ComponentsProxy.NAME , [ ] ) ;		}				/**		 * Adds a component to the list.		 * 		 * @param	component	The component to be added.		 */		public function addComponent ( component : Component ) : void		{			if ( this.components.indexOf( component ) < 0 )			{				this.components.push( component ) ;			}		}				/**		 * Retrieves a component from the list based on its identifier.		 * 		 * @param	id	The identifier of the component.		 * @return	The component associated with the identifier provided.		 */		public function getComponentById ( id : String ) : Component		{			for each ( var component : Component in this.components )			{				if ( component.id == id ) return component ;			}			return null ;		}				/**		 * Retrieves a component from the list based on its URL.		 * 		 * @param	url	The URL of the component.		 * @return	The component associated with the URL provided.		 */		public function getComponentByUrl ( url : String ) : Component		{			for each ( var component : Component in this.components )			{				if ( component.url == url ) return component ;			}			return null ;		}	}}