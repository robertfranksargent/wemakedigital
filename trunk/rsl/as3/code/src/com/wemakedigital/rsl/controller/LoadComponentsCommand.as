package com.wemakedigital.rsl.controller {	import com.wemakedigital.rsl.RSLConstants;	import com.wemakedigital.rsl.model.Component;	import com.wemakedigital.rsl.model.ComponentsProxy;	import com.wemakedigital.rsl.model.Manifest;		import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.command.SimpleCommand;		import flash.events.ErrorEvent;	import flash.events.Event;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;		/**	 * Command class for loading components.	 */	public class LoadComponentsCommand extends SimpleCommand 	{		//----------------------------------------------------------------------		//		//  Variables		//		//----------------------------------------------------------------------					/**		 * @private		 */		private var manifest : Manifest ;				/**		 * @private		 */		private var componentLoadList : Array ;				//----------------------------------------------------------------------		//		//  Getters and Setters		//		//----------------------------------------------------------------------						/**		 * @private		 */		private function get componentsProxy ( ) : ComponentsProxy		{			return this.facade.retrieveProxy( ComponentsProxy.NAME ) as ComponentsProxy ;		}				//----------------------------------------------------------------------		//		//  Methods		//		//----------------------------------------------------------------------		/**		 * This method executes the loading of all components associated with a given RSL manifest.		 * The INotification object passed in the <code>note</code> parameter must refer to a		 * preloaded Manifest object in its <code>body</code>property. 		 * 		 * @inheritDoc		 */		override public function execute ( note : INotification ) : void		{			if ( this.componentsProxy )			{				this.manifest = note.getBody( ) as Manifest ;				if ( this.manifest.isLoaded )				{					var loadList : Array = manifest.createLoadList( ) ;					this.componentLoadList = [ ] ;										for each ( var manifest : Manifest in loadList )					{						if ( ! this.componentsProxy.getComponentByUrl( manifest.componentURL ) )						{							var component : Component = new Component( ) ;							component.id = manifest.id ;							component.url = manifest.componentURL ;														this.componentLoadList.push( component ) ;							this.componentsProxy.addComponent( component ) ;						}					}										this.loadNext( ) ;				}				else				{					throw new Error( "Manifest has not been through the proper load cycle: " + manifest.id ) ;				}			}			else			{				throw new Error( "ComponentsProxy must be registered before this command is executed." ) ;			}		}				/**		 * @private		 */		private function loadNext ( ) : void		{			var component : Component = this.componentLoadList.pop( ) as Component ;			if ( component )			{				component.addEventListener( Event.COMPLETE , this.onComponentLoadComplete ) ;				component.addEventListener( ErrorEvent.ERROR , this.onComponentLoadError ) ;				component.load( new LoaderContext( false , ApplicationDomain.currentDomain ) ) ;			}			else			{				this.completeComponentLoad( ) ;			}		}		/**		 * @private		 */		private function removeComponentListeners ( component : Component ) : void		{			component.removeEventListener( Event.COMPLETE , this.onComponentLoadComplete ) ;			component.removeEventListener( ErrorEvent.ERROR , this.onComponentLoadError ) ;		}				/**		 * @private		 */		private function completeComponentLoad ( ) : void		{			if ( this.componentLoadList.length > 0 )			{				this.loadNext( ) ;			}			else			{				this.sendNotification( RSLConstants.LOAD_COMPONENT_COMPLETE , this.manifest ) ;			}		}				//----------------------------------------------------------------------		//		//  Event Handlers		//		//----------------------------------------------------------------------				/**		 * @private		 */		private function onComponentLoadComplete ( e : Event ) : void		{			var component : Component = e.target as Component ;			this.removeComponentListeners( component ) ;			this.completeComponentLoad( ) ;		}		/**		 * @private		 */		private function onComponentLoadError ( e : ErrorEvent ) : void		{			var component : Component = e.target as Component ;			this.removeComponentListeners( component ) ;			this.sendNotification( RSLConstants.LOAD_COMPONENT_ERROR , component ) ;		}	}}