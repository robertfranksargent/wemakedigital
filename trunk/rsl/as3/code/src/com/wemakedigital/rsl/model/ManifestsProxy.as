package com.wemakedigital.rsl.model{	import org.puremvc.as3.multicore.patterns.proxy.Proxy;		/**	 * This class is responsible for storing component manifests.	 */	public class ManifestsProxy extends Proxy 	{		//----------------------------------------------------------------------		//		//  Constants		//		//----------------------------------------------------------------------				/**		 * The name of the proxy.		 */		public static const NAME : String = "ManifestsProxy" ;				//----------------------------------------------------------------------		//		//  Getters and Setters		//		//----------------------------------------------------------------------						/**		 * A list of component manifests.		 */		public function get manifests ( ) : Array		{			return this.data as Array ;		}				/**		 * @private		 */		public function set manifests ( value : Array ) : void		{			this.data = value ;		}				//----------------------------------------------------------------------		//		//  Methods		//		//----------------------------------------------------------------------						/**		 * Constructor		 */		public function ManifestsProxy ( )		{			super( ManifestsProxy.NAME , [ ] ) ;		}				/**		 * Adds a component manifest to the list.		 */		public function addManifest ( manifest : Manifest ) : void		{			if ( this.manifests.indexOf( manifest ) < 0 )			{				this.manifests.push( manifest ) ;			}		}				/**		 * @return	The component manifest associated with the identifier.		 */		public function getManifestById ( id : String ) : Manifest		{			for each ( var manifest : Manifest in this.manifests )			{				if ( manifest.id == id ) return manifest ;			}			return null ;		}				/**		 * @return	The component manifest associated with the URL.		 */		public function getManifestByUrl ( url : String ) : Manifest		{			for each ( var manifest : Manifest in this.manifests )			{				if ( manifest.url == url ) return manifest ;			}			return null ;		}				/**		 * @return	A value of <code>true</code> if all the manifests are loaded.		 */		public function isManifestsLoadComplete ( ) : Boolean		{			for each ( var manifest : Manifest in this.manifests )			{				if ( ! manifest.isLoaded ) return false ;			}			return true ;		}				public function contains ( manifest : Manifest ) : Boolean		{			return this.manifests.indexOf( manifest ) > -1 ;		}	}}