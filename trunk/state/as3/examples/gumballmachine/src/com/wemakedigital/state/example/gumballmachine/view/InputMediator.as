package com.wemakedigital.state.example.gumballmachine.view {	import com.wemakedigital.log.Log;	import com.wemakedigital.state.example.gumballmachine.GumballMachineFacade;	import com.wemakedigital.state.model.StateProxy;		import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.mediator.Mediator;		import flash.display.Sprite;	import flash.events.KeyboardEvent;		public class InputMediator extends Mediator 	{		public static const NAME : String = "InputMediator";		public function InputMediator ( viewComponent : Object = null )		{			super( InputMediator.NAME , viewComponent );		}		override public function listNotificationInterests () : Array		{			return [ StateProxy.CALLED,					 StateProxy.ERROR,					 StateProxy.COMPLETE,					 StateProxy.CONFIRM ].concat( super.listNotificationInterests( ) ) ;		}		override public function handleNotification (notification : INotification) : void		{			switch( notification.getName( ) )			{				case StateProxy.CALLED:					this.removeKeyboardListeners( ) ;					break;				case StateProxy.ERROR:				case StateProxy.COMPLETE:					this.addKeyboardListeners( ) ;					break;				case StateProxy.CONFIRM :					if ( notification.getType() == GumballMachineFacade.EVENT_DISPENSE ) 						this.sendNotification( GumballMachineFacade.EVENT_DISPENSE , true, StateProxy.CONFIRM_RESPONSE );					break ;			}		}				override public function onRegister() : void		{			this.addKeyboardListeners() ;			Log.info( this, "onRegister", "Key 'e': " + GumballMachineFacade.EVENT_EJECTS_QUARTER ) ;			Log.info( this, "onRegister", "Key 't': " + GumballMachineFacade.EVENT_TURNS_CRANK ) ;			Log.info( this, "onRegister", "Key 'd': " + GumballMachineFacade.EVENT_DISPENSE ) ;			Log.info( this, "onRegister", "Key 'i': " + GumballMachineFacade.EVENT_INSERT_QUARTER ) ;		}				private function addKeyboardListeners () : void		{			(this.viewComponent as Sprite).stage.addEventListener( KeyboardEvent.KEY_DOWN , onKeyDown );		}		private function removeKeyboardListeners () : void		{			(this.viewComponent as Sprite).stage.removeEventListener( KeyboardEvent.KEY_DOWN , onKeyDown );		}		private function onKeyDown ( e : KeyboardEvent) : void 		{ //			trace( "Key press: " + String.fromCharCode( e.charCode ) + " (key code: " + e.keyCode + " character code: " + e.charCode + ")" );			switch ( String.fromCharCode( e.charCode ) )			{				case "d" :					Log.info( this, "onKeyDown", GumballMachineFacade.EVENT_DISPENSE ) ;					this.sendNotification( GumballMachineFacade.EVENT_DISPENSE , this, StateProxy.CALL_CONFIRM );//					this.sendNotification( GumballMachineFacade.STATE_NO_QUARTER , this, StateProxy.CALL_CONFIRM );					break;				case "e" :					Log.info( this, "onKeyDown", GumballMachineFacade.EVENT_EJECTS_QUARTER ) ;					this.sendNotification( GumballMachineFacade.EVENT_EJECTS_QUARTER , this );					break; 				case "i" :					Log.info( this, "onKeyDown", GumballMachineFacade.EVENT_INSERT_QUARTER ) ;					this.sendNotification( GumballMachineFacade.EVENT_INSERT_QUARTER , this );					break;				case "t" :					Log.info( this, "onKeyDown", GumballMachineFacade.EVENT_TURNS_CRANK ) ;					this.sendNotification( GumballMachineFacade.EVENT_TURNS_CRANK , this );					break;  			}		}	}}