package com.wemakedigital.state.example.gumballmachine {	import com.wemakedigital.state.example.gumballmachine.controller.StartupCommand;	import com.wemakedigital.log.Log;		import org.puremvc.as3.multicore.patterns.facade.Facade;		import flash.display.Sprite;		/**	 * PureMVC multicore facade.	 */	public class GumballMachineFacade extends Facade 	{		//----------------------------------------------------------------------		//		//  Notifications		//		//----------------------------------------------------------------------				/**		 * Application startup notification constant.		 */		public static const STARTUP : String = "STARTUP";				//----------------------------------------------------------------------		//		//  State Notifications		//		//----------------------------------------------------------------------				public static const STATE_NO_QUARTER : String = "STATE_NO_QUARTER" ;		public static const STATE_HAS_QUARTER : String = "STATE_HAS_QUARTER" ;		public static const STATE_SOLD : String = "STATE_SOLD" ;		public static const STATE_SOLD_OUT : String = "STATE_SOLD_OUT" ;		public static const EVENT_INSERT_QUARTER : String = "EVENT_INSERT_QUARTER" ;		public static const EVENT_TURNS_CRANK : String = "EVENT_TURNS_CRANK" ;		public static const EVENT_EJECTS_QUARTER : String = "EVENT_EJECTS_QUARTER" ;		public static const EVENT_DISPENSE : String = "EVENT_DISPENSE" ;		public static const ACTION_INSERT_QUARTER : String = "ACTION_INSERT_QUARTER" ;		public static const ACTION_TURNS_CRANK : String = "ACTION_TURNS_CRANK" ;		public static const ACTION_EJECTS_QUARTER : String = "ACTION_EJECTS_QUARTER" ;		public static const ACTION_DISPENSE_GUMBALL : String = "ACTION_DISPENSE_GUMBALL" ;		public static const ACTION_DISPENSE_LAST_GUMBALL : String = "ACTION_DISPENSE_LAST_GUMBALL" ;		public static const CONDITION_HAS_GUMBALLS : String = "CONDITION_HAS_GUMBALLS" ;				//----------------------------------------------------------------------		//		//  Variables		//		//----------------------------------------------------------------------				public var application : Sprite ;				//----------------------------------------------------------------------		//		//  Constructor		//		//----------------------------------------------------------------------				/**		 * Class constructor.		 * 		 * @param key The multiton key.		 */		public function GumballMachineFacade ( key : String )		{			Log.stackTrace( this, "GumballMachineFacade", key ) ;			super( key );    		}				//----------------------------------------------------------------------		//		//  Methods		//		//----------------------------------------------------------------------				/**		 * Singleton ApplicationFacade factory method.		 */		public static function getInstance ( key : String ) : GumballMachineFacade 		{			if ( Facade.instanceMap[ key ] == null ) Facade.instanceMap[ key ] = new GumballMachineFacade( key );			return Facade.instanceMap[ key ] as GumballMachineFacade;		}		/**		 * Register commands with the controller.		 */		override protected function initializeController ( ) : void 		{			Log.stackTrace( this, "initializeController" ) ;			super.initializeController( );			this.registerCommand( GumballMachineFacade.STARTUP , StartupCommand );		}		/**		 * Application startup.		 * 		 * @param application A reference to the application component.		 */  		public function startup ( application : Sprite ) : void		{			Log.stackTrace( this, "startup", application ) ;			this.application = application ;			sendNotification( GumballMachineFacade.STARTUP , application );		}	}}