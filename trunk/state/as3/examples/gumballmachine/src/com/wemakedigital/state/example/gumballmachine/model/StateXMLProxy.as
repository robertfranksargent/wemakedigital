package com.wemakedigital.state.example.gumballmachine.model {	import com.wemakedigital.log.Log;	import com.wemakedigital.state.example.gumballmachine.GumballMachine;	import com.wemakedigital.state.example.gumballmachine.GumballMachineFacade;		import org.puremvc.as3.multicore.interfaces.IProxy;	import org.puremvc.as3.multicore.patterns.proxy.Proxy;		/**	 * Contains an XML representation of the state machine. Could be easily 	 * modified to load the XML from an external file.	 */	public class StateXMLProxy extends Proxy implements IProxy 	{		/**		 * Defines the name of the Proxy.		 */		public static const NAME : String = "GumballMachineProxy";				/**		 * Class constructor.		 */		public function StateXMLProxy ()		{			Log.stackTrace( this, "StateXMLProxy" ) ;						GumballMachineFacade.getInstance( GumballMachine.APPLICATION_KEY ) ;						var stateXML : XML = 			<scxml initial={GumballMachineFacade.STATE_NO_QUARTER}>				<state id="STATE_NO_QUARTER">					<transition event="EVENT_INSERT_QUARTER" target="STATE_HAS_QUARTER"></transition>				</state>				<state id="STATE_HAS_QUARTER">					<transition event="EVENT_TURNS_CRANK" target="STATE_SOLD">ACTION_TURNS_CRANK</transition>					<transition event="EVENT_EJECTS_QUARTER" target="STATE_NO_QUARTER"></transition>				</state>				<state id="STATE_SOLD">					<transition event="EVENT_DISPENSE" cond="CONDITION_HAS_GUMBALLS" target="STATE_NO_QUARTER"></transition>					<transition event="EVENT_DISPENSE" cond="!CONDITION_HAS_GUMBALLS" target="STATE_SOLD_OUT"></transition>				</state>				<state id="STATE_SOLD_OUT"/>			</scxml> ;							super( StateXMLProxy.NAME , stateXML );		}				/**		 * XML representation of the state machine.		 */		public function getStateXML () : XML		{			return this.data as XML;		}	}}