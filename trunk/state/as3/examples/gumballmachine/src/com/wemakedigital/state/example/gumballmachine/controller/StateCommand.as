package com.wemakedigital.state.example.gumballmachine.controller {	import com.wemakedigital.log.Log;	import com.wemakedigital.state.controller.StateEventCommand;	import com.wemakedigital.state.example.gumballmachine.GumballMachineFacade;	import com.wemakedigital.state.example.gumballmachine.controller.action.ActionTurnsCrank;	import com.wemakedigital.state.example.gumballmachine.controller.condition.ConditionHasGumballs;	import com.wemakedigital.state.example.gumballmachine.model.StateXMLProxy;	import com.wemakedigital.state.model.StateProxy;	import com.wemakedigital.state.model.StateXMLInjector;		import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.command.SimpleCommand;		/**	 * Sets up the application state machine.	 */	public class StateCommand extends SimpleCommand 	{			/** 		 * Execute the command.		 */		override public function execute (notification : INotification) : void		{				Log.stackTrace( this, "execute", notification.getName(), notification.getType(), notification.getBody() ) ;						// Register state proxy.			this.facade.registerProxy( new StateProxy() );									// Register state XML proxy.			this.facade.registerProxy( new StateXMLProxy() );										// Inject state XML into StateProxy.			StateXMLInjector.inject( this.facade.retrieveProxy( StateProxy.NAME ) as StateProxy, ( this.facade.retrieveProxy( StateXMLProxy.NAME ) as StateXMLProxy ).getStateXML() ) ;						// Register events to StateEventCommand.			// TODO get the proxy to do this.			this.facade.registerCommand( GumballMachineFacade.EVENT_DISPENSE , StateEventCommand );			this.facade.registerCommand( GumballMachineFacade.EVENT_EJECTS_QUARTER , StateEventCommand );			this.facade.registerCommand( GumballMachineFacade.EVENT_INSERT_QUARTER , StateEventCommand );			this.facade.registerCommand( GumballMachineFacade.EVENT_TURNS_CRANK , StateEventCommand );						// Register action commands.			this.facade.registerCommand( GumballMachineFacade.ACTION_TURNS_CRANK , ActionTurnsCrank );						// Register condition commands.			this.facade.registerCommand( GumballMachineFacade.CONDITION_HAS_GUMBALLS , ConditionHasGumballs );		}	}}