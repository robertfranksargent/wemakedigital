package com.wemakedigital.parallax.scenes {	import com.wemakedigital.parallax.events.ParallaxInteractiveEvent;		import com.wemakedigital.parallax.objects.ParallaxObject;	import com.wemakedigital.utils.ArrayUtil;			public class ParallaxScene extends ParallaxObject	{		protected var children : Array ;				public function ParallaxScene ( )		{			this.children = new Array( ) ;		}				override public function set interactive ( value : Boolean ) : void		{			super.interactive = true ;			for each ( var child : ParallaxObject in this.children )			{				if ( value ) this.addChildListeners( child ) ;				else this.removeChildListeners( child ) ;			}		}				public function addChild ( child : ParallaxObject ) : ParallaxObject		{			if ( ! this.contains( child ) )			{				if ( this.interactive ) this.addChildListeners( child ) ;				this.children.push( child ) ;			}			return child ;		}		public function removeChild ( child : ParallaxObject ) : ParallaxObject		{			this.removeChildListeners( child ) ;			if ( child.container.parent ) child.container.parent.removeChild( child.container ) ;			ArrayUtil.remove( child , this.children ) ;			return child ;		}				public function getChildren ( ) : Array		{			return this.children.concat( ) ;		}		public function contains ( child : ParallaxObject ) : Boolean		{			return this.children.indexOf( child ) > -1 ;		}				protected function addChildListeners ( child : ParallaxObject ) : void		{			child.addEventListener( ParallaxInteractiveEvent.ROLL_OVER , this.onChildRollOver ) ;			child.addEventListener( ParallaxInteractiveEvent.ROLL_OUT , this.onChildRollOut ) ;			child.addEventListener( ParallaxInteractiveEvent.CLICK , this.onChildClick ) ;		}				protected function removeChildListeners ( child : ParallaxObject ) : void		{			child.removeEventListener( ParallaxInteractiveEvent.ROLL_OVER , this.onChildRollOver ) ;			child.removeEventListener( ParallaxInteractiveEvent.ROLL_OUT , this.onChildRollOut ) ;			child.removeEventListener( ParallaxInteractiveEvent.CLICK , this.onChildClick ) ;		}				protected function onChildRollOver ( e : ParallaxInteractiveEvent ) : void		{			var event : ParallaxInteractiveEvent = new ParallaxInteractiveEvent( ParallaxInteractiveEvent.ROLL_OVER ) ;			event.parallaxObject = e.target as ParallaxObject ;			this.dispatchEvent( event ) ;		}		protected function onChildRollOut ( e : ParallaxInteractiveEvent ) : void		{			var event : ParallaxInteractiveEvent = new ParallaxInteractiveEvent( ParallaxInteractiveEvent.ROLL_OUT) ;			event.parallaxObject = e.target as ParallaxObject ;			this.dispatchEvent( event ) ;		}		protected function onChildClick ( e : ParallaxInteractiveEvent ) : void		{			var event : ParallaxInteractiveEvent = new ParallaxInteractiveEvent( ParallaxInteractiveEvent.CLICK ) ;			event.parallaxObject = e.target as ParallaxObject ;			this.dispatchEvent( event ) ;		}	}}