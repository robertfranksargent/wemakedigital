package com.wemakedigital.parallax.objects {	import com.wemakedigital.parallax.events.ParallaxInteractiveEvent;	import com.wemakedigital.parallax.render.ParallaxRenderData;		import flash.display.Sprite;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;		public class ParallaxObject extends EventDispatcher	{		public var container : Sprite ;				protected var explicitWidth : Number ;		protected var explicitHeight : Number ;		protected var _x : Number ;		protected var _y : Number ;		protected var _z : Number ;			protected var _px : Number ;		protected var _py : Number ;		protected var _pz : Number ;		protected var _sx : Number ;		protected var _sy : Number ;				private var _visible : Boolean = true ;		private var _interactive : Boolean = false ;				public function ParallaxObject ( x : Number = 0 , y : Number = 0 , z : Number = 0 , width : Number = 0 , height : Number = 0 )		{			this.x = x ;			this.y = y ;			this.z = z ;			this.explicitWidth = width ;			this.explicitHeight = height ;			this.container = new Sprite( ) ;		}				public function project ( data : ParallaxRenderData ) : void		{			var d : Number = this.z - data.camera.z ;			var r : Number = data.camera.focalLength / ( data.camera.focalLength + d ) ;						this.px = ( this.x - data.camera.x ) * r ;			this.py = ( this.y - data.camera.y ) * r ;			this.pz = d ;						this.sx = this.sy = Math.max( 0 , r )  ;						this.visible = this.z > 0 ||						   this.sx > 0 ||						   this.sx > 0 ;						  						   		}				public function render ( data : ParallaxRenderData ) : void { }		public function set x ( value : Number ) : void		{			this._x = value ;		}		public function get x ( ) : Number		{			return this._x ;		}				public function set y ( value : Number ) : void		{			this._y = value ;		}		public function get y ( ) : Number		{			return this._y ;		}				public function set z ( value : Number ) : void		{			this._z = value ;		}		public function get z ( ) : Number		{			return this._z ;		}				public function set width ( value : Number ) : void		{			this.explicitWidth = value ;		}		public function get width ( ) : Number		{			return this.explicitWidth ;		}		public function set height ( value : Number ) : void		{			this.explicitHeight = value ;		}		public function get height ( ) : Number		{			return this.explicitHeight ;		}		public function set visible ( value : Boolean ) : void		{			this.container.visible = value ;			this._visible = value ;		}				public function get visible ( ) : Boolean		{			return this._visible ;		}				public function get depth ( ) : Number		{			return this._pz ;		}		public function set px ( value : Number ) : void		{			this._px = value ;		}		public function get px ( ) : Number		{			return this._px ;		}				public function set py ( value : Number ) : void		{			this._py = value ;		}				public function get py ( ) : Number		{			return this._py ;		}				public function set pz ( value : Number ) : void		{			this._pz = value ;		}				public function get pz ( ) : Number		{			return this._pz ;		}				public function set sx ( value : Number ) : void		{			this._sx = value ;		}		public function get sx ( ) : Number		{			return this._sx ;		}				public function set sy ( value : Number ) : void		{			this._sy = value ;		}				public function get sy ( ) : Number		{			return this._sy ;		}		public function set interactive ( value : Boolean ) : void		{			this._interactive = value ;			if ( value ) this.addMouseListeners( ) ;			else this.removeMouseListeners( ) ;		}	 	public function get interactive ( ) : Boolean		{			return this._interactive ;		}				protected function addMouseListeners ( ) : void		{			this.container.addEventListener( MouseEvent.CLICK , this.onMouseClick ) ;			this.container.addEventListener( MouseEvent.ROLL_OVER , this.onMouseRollOver ) ;			this.container.addEventListener( MouseEvent.ROLL_OUT , this.onMouseRollOut ) ;		}		protected function removeMouseListeners ( ) : void		{			this.container.removeEventListener( MouseEvent.CLICK , this.onMouseClick ) ;			this.container.removeEventListener( MouseEvent.ROLL_OVER , this.onMouseRollOver ) ;			this.container.removeEventListener( MouseEvent.ROLL_OUT , this.onMouseRollOut ) ;		}				protected function onMouseClick ( e : MouseEvent ) : void		{			this.dispatchEvent( new ParallaxInteractiveEvent( ParallaxInteractiveEvent.CLICK , true ) ) ;		}		protected function onMouseRollOver ( e : MouseEvent ) : void		{			this.dispatchEvent( new ParallaxInteractiveEvent( ParallaxInteractiveEvent.ROLL_OVER , true ) ) ;		}		protected function onMouseRollOut ( e : MouseEvent ) : void		{			this.dispatchEvent( new ParallaxInteractiveEvent( ParallaxInteractiveEvent.ROLL_OUT , true ) ) ;		}	}}