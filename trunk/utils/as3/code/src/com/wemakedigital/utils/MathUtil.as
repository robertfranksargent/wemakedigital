package com.wemakedigital.utils {	import flash.geom.Point;	import flash.geom.Rectangle;		public class MathUtil 	{		public static function correctAngle ( origin : Number , target : Number ) : Number		{			var t : Number = target % 360 ;			var o : Number = origin % 360 ;			var f : Number = Math.abs( t - o ) ;			var d : Number ;						if ( f < 180 ) d = f ;			else d = 360 - f ;						if ( f < 180 )			{				if ( t > o ) return o + d ;				else if ( t < o ) return o - d ;			}			else			{				if ( t > o ) return o - d ;				else if ( t < o ) return o + d ;			}						return t ;		}		public static function minMax ( number : Number , min : Number , max : Number ) : Number		{			return Math.max( min , Math.min( max , number ) ) ;		}		public static function modulate ( number : Number , modulo : Number ) : Number		{			return number - ( number % modulo ) ;		}		public static function nearest ( number : Number , numbers : Array ) : Number		{			if ( numbers.length > 0 )			{				var compare : Array = new Array( ) ;				for each ( var num : Number in numbers ) compare.push( { n : num , d : Math.abs( num - number ) } ) ;				compare.sortOn( "d" , Array.NUMERIC ) ;				return compare.shift( )[ "n" ] as Number ;			}			else			{				return 0 ;			}		}		public static function random ( min : Number , max : Number ) : Number		{			return min + Math.random( ) * ( max - min ) ;		}		public static function randomPoint ( rect : Rectangle ) : Point		{			return new Point( rect.left + Math.random( ) * ( rect.width ) , rect.top + Math.random( ) * ( rect.height ) ) ;		}		public static function ratio ( min : Number , max : Number , current : Number , clamp : Boolean = false ) : Number		{			var r : Number = ( current - min ) / ( max - min ) ; 			return clamp ? MathUtil.minMax( r , 0 , 1 ) : r ;		}		public static function round ( number : Number , dps : uint = 0 ) : Number		{			return Math.round( number * Math.pow( 10 , dps ) ) / Math.pow( 10 , dps ) ;		}		public static function roundPoint ( point : Point ) : Point		{			return new Point( Math.round( point.x ) , Math.round( point.y ) ) ;		}		public static function shortestAngle ( origin : Number , target : Number ) : Number		{			var o : Number = Math.abs( origin ) ;			var t : Number = origin < 0 ? - target : target ;						if ( o % 360 )			{				o = o - ( o % 360 ) + t ;				if ( Math.abs( o + 360 - origin ) < Math.abs( o - origin ) )				{					o += 360 ;				}			}			else o = o + t ;						if ( origin < 0 ) o *= - 1 ;			return o ;		}		public static function toDegrees ( radians : Number ) : Number		{			return radians * 180 / Math.PI ;		}		public static function toRadians ( degrees : Number ) : Number		{			return degrees * Math.PI / 180 ;		}	}}