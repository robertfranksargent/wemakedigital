package com.wemakedigital.log{	import com.wemakedigital.log.filters.ILogFilter;	import com.wemakedigital.log.filters.LogDelayFilter;	import com.wemakedigital.log.outputs.ILogOutput;			public class Log	{		/**		 * @private An array of level names ("FATAL", "ERROR", "WARNING", "INFO", "DEBUG").		 */		private static const LEVEL_NAMES : Array = [ "FATAL", "ERROR", "WARNING", "INFO", "DEBUG", "STACK_TRACE" ] ;				/**		 * @private The set Log level (default is LogLevel.DEBUG).		 */		private static var level : uint = LogLevel.DEBUG ;				/**		 * @private The array of log messages.		 */		private static var logMessages : Array = [ ] ;				/**		 * @private The array of ILogOutput destinations.		 */		private static var logOutputs : Array = [ ] ;				/**		 * @private The array of ILogFilter instances.		 */		private static var logFilters : Array = [ ] ;				/**		 * @private		 */		private static var canSetLogLevel : Boolean = true ;		/**		 * Gets the name of a level based on a log level number.		 * 		 * @param	level	uint of the log level.		 * @return	String name of the log level.		 */		public static function getLevelName ( level : uint ) : String		{			return Log.LEVEL_NAMES[ level ] ;		}		/**		 * Sets the log level.		 * 		 * @param	level	Number of the log level.		 */		public static function setLevel ( level : uint ) : void		{			if ( ! Log.canSetLogLevel )			{				Log.error( Log , "setLevel" , "The log level cannot be set more than once!" ) ;			}			else if ( Log.getLevelName( level ) != null )			{				Log.level = level ;				Log.canSetLogLevel = false ;			}		}				/**		 * TODO Documentation.		 */		public static function setLogDelay ( delay : int , instance : Object , methodName : String = null , level : int = -1 ) : void		{			var logDelayFilter : LogDelayFilter = new LogDelayFilter( delay ) ;			logDelayFilter.setClassName( instance.toString( ) ) ;			logDelayFilter.setMethodName( methodName ) ;			logDelayFilter.setLevel( level ) ;			Log.addLogFilter( logDelayFilter ) ;		}		/**		 * Gets the log level.		 * 		 * @return	Number of the log level.		 */		public static function getLevel ( ) : uint		{			return Log.level ;		}		/**		 * Checks to see if a log level is enabled.		 * 		 * @param	level	uint of the log level.		 * @return	Boolean; true if enabled, otherwise false.		 */		public static function levelEnabled ( level : uint ) : Boolean		{			return level <= Log.getLevel( ) ; 		}		/**		 * Gets the length of the log.		 * 		 * @return	The number of items in the log messages array.		 */		public static function getLogLength ( ) : uint		{			return Log.logMessages.length ;		}		/**		 * Gets the last log message recorded.		 * 		 * @return	LogMessage collection.		 */		public static function getLastLogMessage ( ) : LogMessage		{			return Log.logMessages[ Log.logMessages.length - 1 ] ;		}		/**		 * Gets the last log message recorded at a specific index in the array.		 * 		 * @param	index	The array index number.		 * @return	LogMessage.		 */		public static function getLogMessageAt ( index : uint ) : LogMessage		{			return Log.logMessages[ index ] ;		}		/**		 * Adds an ILogOutput to the Log's output list so that it will receive log messages.		 * 		 * @param logOutput	The ILogOutput.		 */		public static function addLogOutput ( logOutput : ILogOutput ) : void		{			if ( Log.logOutputs.indexOf( logOutput ) < 0 )			{				Log.logOutputs.push( logOutput ) ;			}		}				/**		 * Adds an ILogFiler to the log filter list.		 * 		 * @param	logFilter	An instance implementing ILogFilter.		 */		public static function addLogFilter ( logFilter : ILogFilter ) : void		{			if ( Log.logFilters.indexOf( logFilter ) < 0 )			{				Log.logFilters.push( logFilter ) ;			}		}		/**		 * Stores a logMessage and sends it to all added ILogOutputs		 * 		 * @param logMessage	The logMessage.		 */		public static function addLogMessage ( logMessage : LogMessage ) : LogMessage		{			var logFilter : ILogFilter = Log.getLogFilter( logMessage ) ;			if ( ! logFilter || logFilter.canOutputMessage )			{				if ( Log.levelEnabled( logMessage.level ) )				{ 					Log.logMessages.push( logMessage ) ;					for each ( var logOutput : ILogOutput in Log.logOutputs )					{						logOutput.output( logMessage ) ;					}					if ( logFilter ) logFilter.reset( ) ;					return logMessage ;				}			}			return null ;		}		/**		 * Logs a fatal error.		 * 		 * @param 	instance		The instance of the object that logged this error.		 * @param 	methodName		The name of the method that logged this error.		 * @param	... messages	An Array of log messages.		 */		public static function fatal ( instance : Object , methodName : String , ... messages ) : LogMessage		{			return Log.addLogMessage( new LogMessage( LogLevel.FATAL , instance.toString( ) , methodName , messages ) ) ;		}		/**		 * Logs an error.		 * 		 * @param 	instance		The instance of the object that logged this error.		 * @param 	methodName		The name of the method that logged this error.		 * @param	... messages	An Array of log messages.		 */		public static function error ( instance : Object , methodName : String , ... messages ) : LogMessage		{			return Log.addLogMessage( new LogMessage( LogLevel.ERROR , instance.toString( ) , methodName , messages ) ) ;		}		/**		 * Logs a warning.		 * 		 * @param 	instance		The instance of the object that logged this error.		 * @param 	methodName		The name of the method that logged this error.		 * @param	... messages	An Array of log messages.		 */		public static function warning ( instance : Object , methodName : String , ... messages ) : LogMessage		{			return Log.addLogMessage( new LogMessage( LogLevel.WARNING , instance.toString( ) , methodName , messages ) ) ;		}		/**		 * Logs an info message.		 * 		 * @param 	instance		The instance of the object that logged this error.		 * @param 	methodName		The name of the method that logged this error.		 * @param	... messages	An Array of log messages.		 */		public static function info ( instance : Object , methodName : String , ... messages ) : LogMessage		{			return Log.addLogMessage( new LogMessage( LogLevel.INFO , instance.toString( ) , methodName , messages ) ) ;		}		/**		 * Logs a debug message.		 * 		 * @param 	instance		The instance of the object that logged this error.		 * @param 	methodName		The name of the method that logged this error.		 * @param	... messages	An Array of log messages.		 */		public static function debug ( instance : Object , methodName : String , ... messages ) : LogMessage		{			return Log.addLogMessage( new LogMessage( LogLevel.DEBUG , instance.toString( ) , methodName , messages ) ) ;		}				/**		 * Logs a trace message.		 * 		 * @param	... messages	An Array of log messages.		 */		public static function stackTrace ( instance : Object , methodName : String , ... messages ) : LogMessage		{			return Log.addLogMessage( new LogMessage( LogLevel.STACK_TRACE , instance.toString( ) , methodName , messages ) ) ;		}				/**		 * @private Gets the filter for a specific log message.		 */		internal static function getLogFilter ( logMessage : LogMessage ) : ILogFilter		{			for each ( var logFilter : ILogFilter in Log.logFilters )			{				if ( logFilter.getClassName( ) == logMessage.className )				{					if ( ! logFilter.getMethodName( ) || logFilter.getMethodName( ) == logMessage.methodName )					{						if ( logFilter.getLevel( ) < 0 || logFilter.getLevel( ) == logMessage.level )						{							return logFilter ;						}					}				}			}			return null ;		}	}}