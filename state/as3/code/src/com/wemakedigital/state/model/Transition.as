package com.wemakedigital.state.model {	import com.wemakedigital.log.Log;		/**	 * Defines a state transition.	 */	public class Transition 	{			//----------------------------------------------------------------------		//		//  Variables		//		//----------------------------------------------------------------------				/**		 * The event notification name.		 */		public var event : String;		/**		 * The condition notification name. If undefined, any action or target 		 * state change will execute unconditionally.		 */		public var condition : String;				/**		 * Indicates whether the condition is inverted i.e. if the condition 		 * returns false it will trigger this transition. Default is false.		 */		public var conditionInverse : Boolean ;		/**		 * The target state idenfier and notification name. If undefined the 		 * transition action can still execute without a subsequent change in 		 * state.		 */		public var target : String;				/**		 * The action notification name. 		 */		public var action : String;				//----------------------------------------------------------------------		//		//  Constructor		//		//----------------------------------------------------------------------				/**		 * Class constructor.		 * 		 * @param event The event notification name associated with this 		 * transition.		 * @param condition The condition notification name. If undefined, any 		 * action or target state change will execute unconditionally.		 * @param conditionInverse Indicates whether the condition is inverted 		 * i.e. if the condition returns false it will trigger this transition. 		 * Default is false.		 * @param target The target state idenfier and notification name. If 		 * undefined the transition action can still execute without a 		 * subsequent change in state.		 * @param action The action notification name. 		 */		public function Transition ( event : String, condition : String = null, conditionInverse : Boolean = false, target : String = null, action : String = null )		{			Log.stackTrace( this, "Transition", event, condition, conditionInverse, target, action) ;			this.event = event;			this.condition = condition;			this.conditionInverse = conditionInverse;			this.target = target;			this.action = action;		}	}}