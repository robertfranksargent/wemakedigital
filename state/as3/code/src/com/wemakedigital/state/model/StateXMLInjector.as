package com.wemakedigital.state.model {	import com.wemakedigital.state.model.StateProxy;	import com.wemakedigital.log.Log;			/**	 * Injects XML into the state proxy.	 */	public class StateXMLInjector 	{			//----------------------------------------------------------------------		//		//  Methods		//		//----------------------------------------------------------------------				/**		 * Injects XML into the state proxy.		 * 		 * @param stateProxy The state proxy to inject into.		 * @param stateXML The State XML to inject.		 * @param clearStates Clears existing states from the state proxy if 		 * true. Default is false.		 */		public static function inject ( stateProxy : StateProxy, stateXML : XML, clearStates : Boolean = false ) : void		{			Log.stackTrace( StateXMLInjector, "inject", stateXML, clearStates ) ;						// Clear existing states in the state proxy if the clearStates flag is set to true.			if ( clearStates ) stateProxy.clearStates() ;						// Inject each 'state' node found in the xml.			for each ( var stateNode : XML in stateXML.child( "state" ) )			{				var id : String = stateNode.@id ;				var state : State = stateProxy.createState( id ) ;								// Inject each 'transition' node found in the state xml.				for each ( var transitionNode : XML in stateNode.child( "transition" ) )				{					var event : String = transitionNode.@event ;					var conditionInverse : Boolean = String( transitionNode.@cond ).indexOf( "!" ) == 0 ;					var condition : String = conditionInverse ? String( transitionNode.@cond ).substring( 1 ) : transitionNode.@cond ;					var target : String = transitionNode.@target ;					var action : String =  transitionNode.valueOf() ;					var transition : Transition = new Transition( event, condition, conditionInverse, target, action ) ;					state.addTransition( transition ) ;				}			}						// Set the initial state from the xml.			if ( stateXML.@initial ) stateProxy.setInitialState( stateXML.@initial ) ;		}	}}