package com.wemakedigital.state.controller {	import com.wemakedigital.state.model.StateProxy;	import com.wemakedigital.state.view.IStateResponder;	import com.wemakedigital.log.Log;		import org.puremvc.as3.multicore.interfaces.INotification;		/**	 * Responds to all state notifications. Adds and removes state responders 	 * and passes their enter and exit responses to the state proxy.	 */	public class StateResponderCommand extends SimpleStateCommand 	{			//----------------------------------------------------------------------		//		//  Methods		//		//----------------------------------------------------------------------				/** 		 * Execute the command.		 */		override public function execute ( notification : INotification ) : void		{			Log.stackTrace( this, "execute", notification.getName(), notification.getType(), notification.getBody() ) ;						// The state notification.			var state : String = notification.getName( ) as String ;						// The responder that sent the notification.			var responder : IStateResponder = notification.getBody( ) as IStateResponder ;						// Type determines how to update the state proxy.			switch ( notification.getType( ) )			{				case StateProxy.ADD_RESPONDER :					this.stateProxy.getState( state ).addResponder( responder ) ;					break ;				case StateProxy.REMOVE_RESPONDER :					this.stateProxy.getState( state ).removeResponder( responder ) ;					break ;				case StateProxy.EXIT_RESPONSE :					this.stateProxy.exitResponse( state , responder ) ;					break ;				case StateProxy.ENTER_RESPONSE :					this.stateProxy.enterResponse( state , responder ) ;					break ;			}		}	}}