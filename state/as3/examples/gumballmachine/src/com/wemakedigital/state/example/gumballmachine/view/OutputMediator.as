package com.wemakedigital.state.example.gumballmachine.view {	import com.wemakedigital.log.Log;	import com.wemakedigital.state.example.gumballmachine.GumballMachineFacade;	import com.wemakedigital.state.model.StateProxy;	import com.wemakedigital.state.view.StateResponderMediator;		import org.puremvc.as3.multicore.interfaces.INotification;		import flash.utils.setTimeout;			public class OutputMediator extends StateResponderMediator 	{		public static const NAME : String = "OutputMediator";		public function OutputMediator ( viewComponent : Object = null )		{			super( OutputMediator.NAME , viewComponent );		}				/**		 * Lists the states this mediator will respond to.		 * 		 * @return An Array of state ids.		 */		override public function listStateInterests () : Array		{			return [ GumballMachineFacade.STATE_HAS_QUARTER,					 GumballMachineFacade.STATE_NO_QUARTER,					 GumballMachineFacade.STATE_SOLD,					 GumballMachineFacade.STATE_SOLD_OUT ].concat( super.listStateInterests( ) ) ;		}		override public function handleNotification ( notification : INotification ) : void		{			switch( notification.getName() )			{				case GumballMachineFacade.STATE_HAS_QUARTER :				case GumballMachineFacade.STATE_NO_QUARTER :				case GumballMachineFacade.STATE_SOLD :				case GumballMachineFacade.STATE_SOLD_OUT :					if ( notification.getType() == StateProxy.EXIT )					{						Log.info( this, "handleNotification", StateProxy.EXIT, notification.getName() ) ;						setTimeout( this.onExit, 1000, notification.getName() ) ;					}					else if ( notification.getType() == StateProxy.ENTER )					{						Log.info( this, "handleNotification", StateProxy.ENTER, notification.getName() ) ;						setTimeout( this.onEnter, 1000, notification.getName() ) ;					}					break; 			}		}				private function onExit( eventName : String ) : void		{			Log.stackTrace( this, "onExit", eventName ) ;			this.sendNotification( eventName, this, StateProxy.EXIT_RESPONSE ) ;		}		private function onEnter( eventName : String ) : void		{			Log.stackTrace( this, "onEnter", eventName ) ;			this.sendNotification( eventName, this, StateProxy.ENTER_RESPONSE ) ;					}	}}